// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// POGTokenMetaData contains all meta data concerning the POGToken contract.
var POGTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"LogViewerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"LogViewerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_is_subscribed\",\"type\":\"bool\"}],\"name\":\"addViewer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeViewer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"viewers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"is_subscribed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b50604051620030d1380380620030d1833981810160405281019062000037919062000386565b6040518060400160405280600e81526020017f506f674368616d7020546f6b656e0000000000000000000000000000000000008152506040518060400160405280600381526020017f504f470000000000000000000000000000000000000000000000000000000000815250620000c3620000b76200010260201b60201c565b6200010a60201b60201c565b8160049081620000d4919062000628565b508060059081620000e6919062000628565b505050620000fb3382620001ce60201b60201c565b506200082a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000240576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002379062000770565b60405180910390fd5b62000254600083836200033c60201b60201c565b8060036000828254620002689190620007c1565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200031c91906200080d565b60405180910390a362000338600083836200034160201b60201c565b5050565b505050565b505050565b600080fd5b6000819050919050565b62000360816200034b565b81146200036c57600080fd5b50565b600081519050620003808162000355565b92915050565b6000602082840312156200039f576200039e62000346565b5b6000620003af848285016200036f565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200043a57607f821691505b60208210810362000450576200044f620003f2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004ba7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200047b565b620004c686836200047b565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200050962000503620004fd846200034b565b620004de565b6200034b565b9050919050565b6000819050919050565b6200052583620004e8565b6200053d620005348262000510565b84845462000488565b825550505050565b600090565b6200055462000545565b620005618184846200051a565b505050565b5b8181101562000589576200057d6000826200054a565b60018101905062000567565b5050565b601f821115620005d857620005a28162000456565b620005ad846200046b565b81016020851015620005bd578190505b620005d5620005cc856200046b565b83018262000566565b50505b505050565b600082821c905092915050565b6000620005fd60001984600802620005dd565b1980831691505092915050565b6000620006188383620005ea565b9150826002028217905092915050565b6200063382620003b8565b67ffffffffffffffff8111156200064f576200064e620003c3565b5b6200065b825462000421565b620006688282856200058d565b600060209050601f831160018114620006a057600084156200068b578287015190505b6200069785826200060a565b86555062000707565b601f198416620006b08662000456565b60005b82811015620006da57848901518255600182019150602085019450602081019050620006b3565b86831015620006fa5784890151620006f6601f891682620005ea565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000758601f836200070f565b9150620007658262000720565b602082019050919050565b600060208201905081810360008301526200078b8162000749565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620007ce826200034b565b9150620007db836200034b565b9250828201905080821115620007f657620007f562000792565b5b92915050565b62000807816200034b565b82525050565b6000602082019050620008246000830184620007fc565b92915050565b612897806200083a6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063715018a6116100ad578063a69439aa11610071578063a69439aa1461030a578063a9059cbb1461033c578063d1d989141461036c578063dd62ed3e14610388578063f2fde38b146103b857610121565b8063715018a6146102785780638da5cb5b1461028257806395d89b41146102a05780639dc29fac146102be578063a457c2d7146102da57610121565b806323b872dd116100f457806323b872dd146101ae578063313ce567146101de57806339509351146101fc57806340c10f191461022c57806370a082311461024857610121565b806306fdde0314610126578063095ea7b31461014457806318160ddd1461017457806319cbf0c114610192575b600080fd5b61012e6103d4565b60405161013b9190611887565b60405180910390f35b61015e60048036038101906101599190611951565b610466565b60405161016b91906119ac565b60405180910390f35b61017c610489565b60405161018991906119d6565b60405180910390f35b6101ac60048036038101906101a79190611b52565b610493565b005b6101c860048036038101906101c39190611bc1565b610729565b6040516101d591906119ac565b60405180910390f35b6101e6610758565b6040516101f39190611c30565b60405180910390f35b61021660048036038101906102119190611951565b610761565b60405161022391906119ac565b60405180910390f35b61024660048036038101906102419190611951565b610798565b005b610262600480360381019061025d9190611c4b565b6107ae565b60405161026f91906119d6565b60405180910390f35b6102806107f7565b005b61028a61080b565b6040516102979190611c87565b60405180910390f35b6102a8610834565b6040516102b59190611887565b60405180910390f35b6102d860048036038101906102d39190611951565b6108c6565b005b6102f460048036038101906102ef9190611951565b6108dc565b60405161030191906119ac565b60405180910390f35b610324600480360381019061031f9190611c4b565b610953565b60405161033393929190611ca2565b60405180910390f35b61035660048036038101906103519190611951565b610a32565b60405161036391906119ac565b60405180910390f35b61038660048036038101906103819190611c4b565b610a55565b005b6103a2600480360381019061039d9190611ce0565b610d48565b6040516103af91906119d6565b60405180910390f35b6103d260048036038101906103cd9190611c4b565b610dcf565b005b6060600480546103e390611d4f565b80601f016020809104026020016040519081016040528092919081815260200182805461040f90611d4f565b801561045c5780601f106104315761010080835404028352916020019161045c565b820191906000526020600020905b81548152906001019060200180831161043f57829003601f168201915b5050505050905090565b600080610471610e52565b905061047e818585610e5a565b600191505092915050565b6000600354905090565b600082905060008151036104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390611dcc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361051557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dd90611e5e565b60405180910390fd5b600060405180606001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184151581525090508060066000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816106bd919061202a565b5060408201518160020160006101000a81548160ff0219169083151502179055509050507f9cf180f8bde59d8ad4dd0ee968a65a9a38ac25086bb22167b071c1ac73fd3aa18160000151826020015160405161071a9291906120fc565b60405180910390a15050505050565b600080610734610e52565b9050610741858285611023565b61074c8585856110af565b60019150509392505050565b60006012905090565b60008061076c610e52565b905061078d81858561077e8589610d48565b610788919061215b565b610e5a565b600191505092915050565b6107a0611328565b6107aa82826113a6565b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107ff611328565b61080960006114fd565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606005805461084390611d4f565b80601f016020809104026020016040519081016040528092919081815260200182805461086f90611d4f565b80156108bc5780601f10610891576101008083540402835291602001916108bc565b820191906000526020600020905b81548152906001019060200180831161089f57829003601f168201915b5050505050905090565b6108ce611328565b6108d882826115c1565b5050565b6000806108e7610e52565b905060006108f58286610d48565b90508381101561093a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093190612201565b60405180910390fd5b6109478286868403610e5a565b60019250505092915050565b60066020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461099c90611d4f565b80601f01602080910402602001604051908101604052809291908181526020018280546109c890611d4f565b8015610a155780601f106109ea57610100808354040283529160200191610a15565b820191906000526020600020905b8154815290600101906020018083116109f857829003601f168201915b5050505050908060020160009054906101000a900460ff16905083565b600080610a3d610e52565b9050610a4a8185856110af565b600191505092915050565b8073ffffffffffffffffffffffffffffffffffffffff16600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c9061226d565b60405180910390fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610bd790611d4f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0390611d4f565b8015610c505780601f10610c2557610100808354040283529160200191610c50565b820191906000526020600020905b815481529060010190602001808311610c3357829003601f168201915b505050505081526020016002820160009054906101000a900460ff1615151515815250509050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000610ced919061179a565b6002820160006101000a81549060ff021916905550507f3b5575bb746832578287d16b048923c64a99b5d29b97d2356cf8e636bba10cd481600001518260200151604051610d3c9291906120fc565b60405180910390a15050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610dd7611328565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3d906122ff565b60405180910390fd5b610e4f816114fd565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ec9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec090612391565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f90612423565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161101691906119d6565b60405180910390a3505050565b600061102f8484610d48565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146110a9578181101561109b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110929061248f565b60405180910390fd5b6110a88484848403610e5a565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361111e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111590612521565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361118d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611184906125b3565b60405180910390fd5b611198838383611790565b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561121f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121690612645565b60405180910390fd5b818103600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161130f91906119d6565b60405180910390a3611322848484611795565b50505050565b611330610e52565b73ffffffffffffffffffffffffffffffffffffffff1661134e61080b565b73ffffffffffffffffffffffffffffffffffffffff16146113a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139b906126b1565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140c9061271d565b60405180910390fd5b61142160008383611790565b8060036000828254611433919061215b565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516114e591906119d6565b60405180910390a36114f960008383611795565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611630576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611627906127af565b60405180910390fd5b61163c82600083611790565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156116c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ba90612841565b60405180910390fd5b818103600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600360008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161177791906119d6565b60405180910390a361178b83600084611795565b505050565b505050565b505050565b5080546117a690611d4f565b6000825580601f106117b857506117d7565b601f0160209004906000526020600020908101906117d691906117da565b5b50565b5b808211156117f35760008160009055506001016117db565b5090565b600081519050919050565b600082825260208201905092915050565b60005b83811015611831578082015181840152602081019050611816565b60008484015250505050565b6000601f19601f8301169050919050565b6000611859826117f7565b6118638185611802565b9350611873818560208601611813565b61187c8161183d565b840191505092915050565b600060208201905081810360008301526118a1818461184e565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118e8826118bd565b9050919050565b6118f8816118dd565b811461190357600080fd5b50565b600081359050611915816118ef565b92915050565b6000819050919050565b61192e8161191b565b811461193957600080fd5b50565b60008135905061194b81611925565b92915050565b60008060408385031215611968576119676118b3565b5b600061197685828601611906565b92505060206119878582860161193c565b9150509250929050565b60008115159050919050565b6119a681611991565b82525050565b60006020820190506119c1600083018461199d565b92915050565b6119d08161191b565b82525050565b60006020820190506119eb60008301846119c7565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a338261183d565b810181811067ffffffffffffffff82111715611a5257611a516119fb565b5b80604052505050565b6000611a656118a9565b9050611a718282611a2a565b919050565b600067ffffffffffffffff821115611a9157611a906119fb565b5b611a9a8261183d565b9050602081019050919050565b82818337600083830152505050565b6000611ac9611ac484611a76565b611a5b565b905082815260208101848484011115611ae557611ae46119f6565b5b611af0848285611aa7565b509392505050565b600082601f830112611b0d57611b0c6119f1565b5b8135611b1d848260208601611ab6565b91505092915050565b611b2f81611991565b8114611b3a57600080fd5b50565b600081359050611b4c81611b26565b92915050565b600080600060608486031215611b6b57611b6a6118b3565b5b6000611b7986828701611906565b935050602084013567ffffffffffffffff811115611b9a57611b996118b8565b5b611ba686828701611af8565b9250506040611bb786828701611b3d565b9150509250925092565b600080600060608486031215611bda57611bd96118b3565b5b6000611be886828701611906565b9350506020611bf986828701611906565b9250506040611c0a8682870161193c565b9150509250925092565b600060ff82169050919050565b611c2a81611c14565b82525050565b6000602082019050611c456000830184611c21565b92915050565b600060208284031215611c6157611c606118b3565b5b6000611c6f84828501611906565b91505092915050565b611c81816118dd565b82525050565b6000602082019050611c9c6000830184611c78565b92915050565b6000606082019050611cb76000830186611c78565b8181036020830152611cc9818561184e565b9050611cd8604083018461199d565b949350505050565b60008060408385031215611cf757611cf66118b3565b5b6000611d0585828601611906565b9250506020611d1685828601611906565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d6757607f821691505b602082108103611d7a57611d79611d20565b5b50919050565b7f557365726e616d65206d757374206265206e6f6e2d656d707479000000000000600082015250565b6000611db6601a83611802565b9150611dc182611d80565b602082019050919050565b60006020820190508181036000830152611de581611da9565b9050919050565b7f412076696577657220776974682074686520676976656e20616464726573732060008201527f68617320616c7265616479206265656e20616464656400000000000000000000602082015250565b6000611e48603683611802565b9150611e5382611dec565b604082019050919050565b60006020820190508181036000830152611e7781611e3b565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611ee07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611ea3565b611eea8683611ea3565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611f27611f22611f1d8461191b565b611f02565b61191b565b9050919050565b6000819050919050565b611f4183611f0c565b611f55611f4d82611f2e565b848454611eb0565b825550505050565b600090565b611f6a611f5d565b611f75818484611f38565b505050565b5b81811015611f9957611f8e600082611f62565b600181019050611f7b565b5050565b601f821115611fde57611faf81611e7e565b611fb884611e93565b81016020851015611fc7578190505b611fdb611fd385611e93565b830182611f7a565b50505b505050565b600082821c905092915050565b600061200160001984600802611fe3565b1980831691505092915050565b600061201a8383611ff0565b9150826002028217905092915050565b612033826117f7565b67ffffffffffffffff81111561204c5761204b6119fb565b5b6120568254611d4f565b612061828285611f9d565b600060209050601f8311600181146120945760008415612082578287015190505b61208c858261200e565b8655506120f4565b601f1984166120a286611e7e565b60005b828110156120ca578489015182556001820191506020850194506020810190506120a5565b868310156120e757848901516120e3601f891682611ff0565b8355505b6001600288020188555050505b505050505050565b60006040820190506121116000830185611c78565b8181036020830152612123818461184e565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121668261191b565b91506121718361191b565b92508282019050808211156121895761218861212c565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006121eb602583611802565b91506121f68261218f565b604082019050919050565b6000602082019050818103600083015261221a816121de565b9050919050565b7f566965776572206e6f7420666f756e6400000000000000000000000000000000600082015250565b6000612257601083611802565b915061226282612221565b602082019050919050565b600060208201905081810360008301526122868161224a565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006122e9602683611802565b91506122f48261228d565b604082019050919050565b60006020820190508181036000830152612318816122dc565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061237b602483611802565b91506123868261231f565b604082019050919050565b600060208201905081810360008301526123aa8161236e565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061240d602283611802565b9150612418826123b1565b604082019050919050565b6000602082019050818103600083015261243c81612400565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612479601d83611802565b915061248482612443565b602082019050919050565b600060208201905081810360008301526124a88161246c565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061250b602583611802565b9150612516826124af565b604082019050919050565b6000602082019050818103600083015261253a816124fe565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061259d602383611802565b91506125a882612541565b604082019050919050565b600060208201905081810360008301526125cc81612590565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061262f602683611802565b915061263a826125d3565b604082019050919050565b6000602082019050818103600083015261265e81612622565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061269b602083611802565b91506126a682612665565b602082019050919050565b600060208201905081810360008301526126ca8161268e565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612707601f83611802565b9150612712826126d1565b602082019050919050565b60006020820190508181036000830152612736816126fa565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612799602183611802565b91506127a48261273d565b604082019050919050565b600060208201905081810360008301526127c88161278c565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061282b602283611802565b9150612836826127cf565b604082019050919050565b6000602082019050818103600083015261285a8161281e565b905091905056fea26469706673582212206da54f7bc9120e6aaa095e3e4ee3cb2e740287d06f3422b4c4fde098691d8a7864736f6c63430008130033",
}

// POGTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use POGTokenMetaData.ABI instead.
var POGTokenABI = POGTokenMetaData.ABI

// POGTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use POGTokenMetaData.Bin instead.
var POGTokenBin = POGTokenMetaData.Bin

// DeployPOGToken deploys a new Ethereum contract, binding an instance of POGToken to it.
func DeployPOGToken(auth *bind.TransactOpts, backend bind.ContractBackend, initialSupply *big.Int) (common.Address, *types.Transaction, *POGToken, error) {
	parsed, err := POGTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(POGTokenBin), backend, initialSupply)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &POGToken{POGTokenCaller: POGTokenCaller{contract: contract}, POGTokenTransactor: POGTokenTransactor{contract: contract}, POGTokenFilterer: POGTokenFilterer{contract: contract}}, nil
}

// POGToken is an auto generated Go binding around an Ethereum contract.
type POGToken struct {
	POGTokenCaller     // Read-only binding to the contract
	POGTokenTransactor // Write-only binding to the contract
	POGTokenFilterer   // Log filterer for contract events
}

// POGTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type POGTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// POGTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type POGTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// POGTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type POGTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// POGTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type POGTokenSession struct {
	Contract     *POGToken         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// POGTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type POGTokenCallerSession struct {
	Contract *POGTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// POGTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type POGTokenTransactorSession struct {
	Contract     *POGTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// POGTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type POGTokenRaw struct {
	Contract *POGToken // Generic contract binding to access the raw methods on
}

// POGTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type POGTokenCallerRaw struct {
	Contract *POGTokenCaller // Generic read-only contract binding to access the raw methods on
}

// POGTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type POGTokenTransactorRaw struct {
	Contract *POGTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPOGToken creates a new instance of POGToken, bound to a specific deployed contract.
func NewPOGToken(address common.Address, backend bind.ContractBackend) (*POGToken, error) {
	contract, err := bindPOGToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &POGToken{POGTokenCaller: POGTokenCaller{contract: contract}, POGTokenTransactor: POGTokenTransactor{contract: contract}, POGTokenFilterer: POGTokenFilterer{contract: contract}}, nil
}

// NewPOGTokenCaller creates a new read-only instance of POGToken, bound to a specific deployed contract.
func NewPOGTokenCaller(address common.Address, caller bind.ContractCaller) (*POGTokenCaller, error) {
	contract, err := bindPOGToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &POGTokenCaller{contract: contract}, nil
}

// NewPOGTokenTransactor creates a new write-only instance of POGToken, bound to a specific deployed contract.
func NewPOGTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*POGTokenTransactor, error) {
	contract, err := bindPOGToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &POGTokenTransactor{contract: contract}, nil
}

// NewPOGTokenFilterer creates a new log filterer instance of POGToken, bound to a specific deployed contract.
func NewPOGTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*POGTokenFilterer, error) {
	contract, err := bindPOGToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &POGTokenFilterer{contract: contract}, nil
}

// bindPOGToken binds a generic wrapper to an already deployed contract.
func bindPOGToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := POGTokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_POGToken *POGTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _POGToken.Contract.POGTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_POGToken *POGTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _POGToken.Contract.POGTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_POGToken *POGTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _POGToken.Contract.POGTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_POGToken *POGTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _POGToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_POGToken *POGTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _POGToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_POGToken *POGTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _POGToken.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_POGToken *POGTokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _POGToken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_POGToken *POGTokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _POGToken.Contract.Allowance(&_POGToken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_POGToken *POGTokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _POGToken.Contract.Allowance(&_POGToken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_POGToken *POGTokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _POGToken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_POGToken *POGTokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _POGToken.Contract.BalanceOf(&_POGToken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_POGToken *POGTokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _POGToken.Contract.BalanceOf(&_POGToken.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_POGToken *POGTokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _POGToken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_POGToken *POGTokenSession) Decimals() (uint8, error) {
	return _POGToken.Contract.Decimals(&_POGToken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_POGToken *POGTokenCallerSession) Decimals() (uint8, error) {
	return _POGToken.Contract.Decimals(&_POGToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_POGToken *POGTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _POGToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_POGToken *POGTokenSession) Name() (string, error) {
	return _POGToken.Contract.Name(&_POGToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_POGToken *POGTokenCallerSession) Name() (string, error) {
	return _POGToken.Contract.Name(&_POGToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_POGToken *POGTokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _POGToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_POGToken *POGTokenSession) Owner() (common.Address, error) {
	return _POGToken.Contract.Owner(&_POGToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_POGToken *POGTokenCallerSession) Owner() (common.Address, error) {
	return _POGToken.Contract.Owner(&_POGToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_POGToken *POGTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _POGToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_POGToken *POGTokenSession) Symbol() (string, error) {
	return _POGToken.Contract.Symbol(&_POGToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_POGToken *POGTokenCallerSession) Symbol() (string, error) {
	return _POGToken.Contract.Symbol(&_POGToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_POGToken *POGTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _POGToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_POGToken *POGTokenSession) TotalSupply() (*big.Int, error) {
	return _POGToken.Contract.TotalSupply(&_POGToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_POGToken *POGTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _POGToken.Contract.TotalSupply(&_POGToken.CallOpts)
}

// Viewers is a free data retrieval call binding the contract method 0xa69439aa.
//
// Solidity: function viewers(address ) view returns(address addr, string username, bool is_subscribed)
func (_POGToken *POGTokenCaller) Viewers(opts *bind.CallOpts, arg0 common.Address) (struct {
	Addr         common.Address
	Username     string
	IsSubscribed bool
}, error) {
	var out []interface{}
	err := _POGToken.contract.Call(opts, &out, "viewers", arg0)

	outstruct := new(struct {
		Addr         common.Address
		Username     string
		IsSubscribed bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addr = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Username = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.IsSubscribed = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// Viewers is a free data retrieval call binding the contract method 0xa69439aa.
//
// Solidity: function viewers(address ) view returns(address addr, string username, bool is_subscribed)
func (_POGToken *POGTokenSession) Viewers(arg0 common.Address) (struct {
	Addr         common.Address
	Username     string
	IsSubscribed bool
}, error) {
	return _POGToken.Contract.Viewers(&_POGToken.CallOpts, arg0)
}

// Viewers is a free data retrieval call binding the contract method 0xa69439aa.
//
// Solidity: function viewers(address ) view returns(address addr, string username, bool is_subscribed)
func (_POGToken *POGTokenCallerSession) Viewers(arg0 common.Address) (struct {
	Addr         common.Address
	Username     string
	IsSubscribed bool
}, error) {
	return _POGToken.Contract.Viewers(&_POGToken.CallOpts, arg0)
}

// AddViewer is a paid mutator transaction binding the contract method 0x19cbf0c1.
//
// Solidity: function addViewer(address _addr, string _username, bool _is_subscribed) returns()
func (_POGToken *POGTokenTransactor) AddViewer(opts *bind.TransactOpts, _addr common.Address, _username string, _is_subscribed bool) (*types.Transaction, error) {
	return _POGToken.contract.Transact(opts, "addViewer", _addr, _username, _is_subscribed)
}

// AddViewer is a paid mutator transaction binding the contract method 0x19cbf0c1.
//
// Solidity: function addViewer(address _addr, string _username, bool _is_subscribed) returns()
func (_POGToken *POGTokenSession) AddViewer(_addr common.Address, _username string, _is_subscribed bool) (*types.Transaction, error) {
	return _POGToken.Contract.AddViewer(&_POGToken.TransactOpts, _addr, _username, _is_subscribed)
}

// AddViewer is a paid mutator transaction binding the contract method 0x19cbf0c1.
//
// Solidity: function addViewer(address _addr, string _username, bool _is_subscribed) returns()
func (_POGToken *POGTokenTransactorSession) AddViewer(_addr common.Address, _username string, _is_subscribed bool) (*types.Transaction, error) {
	return _POGToken.Contract.AddViewer(&_POGToken.TransactOpts, _addr, _username, _is_subscribed)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_POGToken *POGTokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_POGToken *POGTokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.Approve(&_POGToken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_POGToken *POGTokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.Approve(&_POGToken.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address account, uint256 amount) returns()
func (_POGToken *POGTokenTransactor) Burn(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.contract.Transact(opts, "burn", account, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address account, uint256 amount) returns()
func (_POGToken *POGTokenSession) Burn(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.Burn(&_POGToken.TransactOpts, account, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address account, uint256 amount) returns()
func (_POGToken *POGTokenTransactorSession) Burn(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.Burn(&_POGToken.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_POGToken *POGTokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _POGToken.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_POGToken *POGTokenSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.DecreaseAllowance(&_POGToken.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_POGToken *POGTokenTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.DecreaseAllowance(&_POGToken.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_POGToken *POGTokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _POGToken.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_POGToken *POGTokenSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.IncreaseAllowance(&_POGToken.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_POGToken *POGTokenTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.IncreaseAllowance(&_POGToken.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 amount) returns()
func (_POGToken *POGTokenTransactor) Mint(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.contract.Transact(opts, "mint", account, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 amount) returns()
func (_POGToken *POGTokenSession) Mint(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.Mint(&_POGToken.TransactOpts, account, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 amount) returns()
func (_POGToken *POGTokenTransactorSession) Mint(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.Mint(&_POGToken.TransactOpts, account, amount)
}

// RemoveViewer is a paid mutator transaction binding the contract method 0xd1d98914.
//
// Solidity: function removeViewer(address _addr) returns()
func (_POGToken *POGTokenTransactor) RemoveViewer(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _POGToken.contract.Transact(opts, "removeViewer", _addr)
}

// RemoveViewer is a paid mutator transaction binding the contract method 0xd1d98914.
//
// Solidity: function removeViewer(address _addr) returns()
func (_POGToken *POGTokenSession) RemoveViewer(_addr common.Address) (*types.Transaction, error) {
	return _POGToken.Contract.RemoveViewer(&_POGToken.TransactOpts, _addr)
}

// RemoveViewer is a paid mutator transaction binding the contract method 0xd1d98914.
//
// Solidity: function removeViewer(address _addr) returns()
func (_POGToken *POGTokenTransactorSession) RemoveViewer(_addr common.Address) (*types.Transaction, error) {
	return _POGToken.Contract.RemoveViewer(&_POGToken.TransactOpts, _addr)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_POGToken *POGTokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _POGToken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_POGToken *POGTokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _POGToken.Contract.RenounceOwnership(&_POGToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_POGToken *POGTokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _POGToken.Contract.RenounceOwnership(&_POGToken.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_POGToken *POGTokenTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_POGToken *POGTokenSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.Transfer(&_POGToken.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_POGToken *POGTokenTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.Transfer(&_POGToken.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_POGToken *POGTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_POGToken *POGTokenSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.TransferFrom(&_POGToken.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_POGToken *POGTokenTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _POGToken.Contract.TransferFrom(&_POGToken.TransactOpts, from, to, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_POGToken *POGTokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _POGToken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_POGToken *POGTokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _POGToken.Contract.TransferOwnership(&_POGToken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_POGToken *POGTokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _POGToken.Contract.TransferOwnership(&_POGToken.TransactOpts, newOwner)
}

// POGTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the POGToken contract.
type POGTokenApprovalIterator struct {
	Event *POGTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *POGTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(POGTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(POGTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *POGTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *POGTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// POGTokenApproval represents a Approval event raised by the POGToken contract.
type POGTokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_POGToken *POGTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*POGTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _POGToken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &POGTokenApprovalIterator{contract: _POGToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_POGToken *POGTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *POGTokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _POGToken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(POGTokenApproval)
				if err := _POGToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_POGToken *POGTokenFilterer) ParseApproval(log types.Log) (*POGTokenApproval, error) {
	event := new(POGTokenApproval)
	if err := _POGToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// POGTokenLogViewerAddedIterator is returned from FilterLogViewerAdded and is used to iterate over the raw logs and unpacked data for LogViewerAdded events raised by the POGToken contract.
type POGTokenLogViewerAddedIterator struct {
	Event *POGTokenLogViewerAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *POGTokenLogViewerAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(POGTokenLogViewerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(POGTokenLogViewerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *POGTokenLogViewerAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *POGTokenLogViewerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// POGTokenLogViewerAdded represents a LogViewerAdded event raised by the POGToken contract.
type POGTokenLogViewerAdded struct {
	Addr     common.Address
	Username string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogViewerAdded is a free log retrieval operation binding the contract event 0x9cf180f8bde59d8ad4dd0ee968a65a9a38ac25086bb22167b071c1ac73fd3aa1.
//
// Solidity: event LogViewerAdded(address addr, string username)
func (_POGToken *POGTokenFilterer) FilterLogViewerAdded(opts *bind.FilterOpts) (*POGTokenLogViewerAddedIterator, error) {

	logs, sub, err := _POGToken.contract.FilterLogs(opts, "LogViewerAdded")
	if err != nil {
		return nil, err
	}
	return &POGTokenLogViewerAddedIterator{contract: _POGToken.contract, event: "LogViewerAdded", logs: logs, sub: sub}, nil
}

// WatchLogViewerAdded is a free log subscription operation binding the contract event 0x9cf180f8bde59d8ad4dd0ee968a65a9a38ac25086bb22167b071c1ac73fd3aa1.
//
// Solidity: event LogViewerAdded(address addr, string username)
func (_POGToken *POGTokenFilterer) WatchLogViewerAdded(opts *bind.WatchOpts, sink chan<- *POGTokenLogViewerAdded) (event.Subscription, error) {

	logs, sub, err := _POGToken.contract.WatchLogs(opts, "LogViewerAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(POGTokenLogViewerAdded)
				if err := _POGToken.contract.UnpackLog(event, "LogViewerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogViewerAdded is a log parse operation binding the contract event 0x9cf180f8bde59d8ad4dd0ee968a65a9a38ac25086bb22167b071c1ac73fd3aa1.
//
// Solidity: event LogViewerAdded(address addr, string username)
func (_POGToken *POGTokenFilterer) ParseLogViewerAdded(log types.Log) (*POGTokenLogViewerAdded, error) {
	event := new(POGTokenLogViewerAdded)
	if err := _POGToken.contract.UnpackLog(event, "LogViewerAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// POGTokenLogViewerRemovedIterator is returned from FilterLogViewerRemoved and is used to iterate over the raw logs and unpacked data for LogViewerRemoved events raised by the POGToken contract.
type POGTokenLogViewerRemovedIterator struct {
	Event *POGTokenLogViewerRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *POGTokenLogViewerRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(POGTokenLogViewerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(POGTokenLogViewerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *POGTokenLogViewerRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *POGTokenLogViewerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// POGTokenLogViewerRemoved represents a LogViewerRemoved event raised by the POGToken contract.
type POGTokenLogViewerRemoved struct {
	Addr     common.Address
	Username string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogViewerRemoved is a free log retrieval operation binding the contract event 0x3b5575bb746832578287d16b048923c64a99b5d29b97d2356cf8e636bba10cd4.
//
// Solidity: event LogViewerRemoved(address addr, string username)
func (_POGToken *POGTokenFilterer) FilterLogViewerRemoved(opts *bind.FilterOpts) (*POGTokenLogViewerRemovedIterator, error) {

	logs, sub, err := _POGToken.contract.FilterLogs(opts, "LogViewerRemoved")
	if err != nil {
		return nil, err
	}
	return &POGTokenLogViewerRemovedIterator{contract: _POGToken.contract, event: "LogViewerRemoved", logs: logs, sub: sub}, nil
}

// WatchLogViewerRemoved is a free log subscription operation binding the contract event 0x3b5575bb746832578287d16b048923c64a99b5d29b97d2356cf8e636bba10cd4.
//
// Solidity: event LogViewerRemoved(address addr, string username)
func (_POGToken *POGTokenFilterer) WatchLogViewerRemoved(opts *bind.WatchOpts, sink chan<- *POGTokenLogViewerRemoved) (event.Subscription, error) {

	logs, sub, err := _POGToken.contract.WatchLogs(opts, "LogViewerRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(POGTokenLogViewerRemoved)
				if err := _POGToken.contract.UnpackLog(event, "LogViewerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogViewerRemoved is a log parse operation binding the contract event 0x3b5575bb746832578287d16b048923c64a99b5d29b97d2356cf8e636bba10cd4.
//
// Solidity: event LogViewerRemoved(address addr, string username)
func (_POGToken *POGTokenFilterer) ParseLogViewerRemoved(log types.Log) (*POGTokenLogViewerRemoved, error) {
	event := new(POGTokenLogViewerRemoved)
	if err := _POGToken.contract.UnpackLog(event, "LogViewerRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// POGTokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the POGToken contract.
type POGTokenOwnershipTransferredIterator struct {
	Event *POGTokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *POGTokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(POGTokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(POGTokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *POGTokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *POGTokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// POGTokenOwnershipTransferred represents a OwnershipTransferred event raised by the POGToken contract.
type POGTokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_POGToken *POGTokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*POGTokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _POGToken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &POGTokenOwnershipTransferredIterator{contract: _POGToken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_POGToken *POGTokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *POGTokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _POGToken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(POGTokenOwnershipTransferred)
				if err := _POGToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_POGToken *POGTokenFilterer) ParseOwnershipTransferred(log types.Log) (*POGTokenOwnershipTransferred, error) {
	event := new(POGTokenOwnershipTransferred)
	if err := _POGToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// POGTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the POGToken contract.
type POGTokenTransferIterator struct {
	Event *POGTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *POGTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(POGTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(POGTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *POGTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *POGTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// POGTokenTransfer represents a Transfer event raised by the POGToken contract.
type POGTokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_POGToken *POGTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*POGTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _POGToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &POGTokenTransferIterator{contract: _POGToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_POGToken *POGTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *POGTokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _POGToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(POGTokenTransfer)
				if err := _POGToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_POGToken *POGTokenFilterer) ParseTransfer(log types.Log) (*POGTokenTransfer, error) {
	event := new(POGTokenTransfer)
	if err := _POGToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
